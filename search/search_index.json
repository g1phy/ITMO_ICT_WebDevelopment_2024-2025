{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Matteo <3","title":"Home"},{"location":"#matteo-3","text":"","title":"Matteo &lt;3"},{"location":"laboratory_work_1/1/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python3 udp_server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: bash python3 udp_client.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import socket UDP_IP = \"127.0.0.1\" UDP_PORT = 5005 sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind((UDP_IP, UDP_PORT)) print(\"UDP server up and listening\") while True: data, addr = sock.recvfrom(1024) print(\"Received message:\", data.decode()) if data.decode() == \"Hello, server\": sock.sendto(\"Hello, client\".encode(), addr)","title":"Task 1"},{"location":"laboratory_work_1/1/#1-udp-","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1: UDP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440"},{"location":"laboratory_work_1/1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"laboratory_work_1/1/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: UDP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"laboratory_work_1/1/#_3","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python3 udp_server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: bash python3 udp_client.py","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"laboratory_work_1/1/#_4","text":"import socket UDP_IP = \"127.0.0.1\" UDP_PORT = 5005 sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) sock.bind((UDP_IP, UDP_PORT)) print(\"UDP server up and listening\") while True: data, addr = sock.recvfrom(1024) print(\"Received message:\", data.decode()) if data.decode() == \"Hello, server\": sock.sendto(\"Hello, client\".encode(), addr)","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"laboratory_work_1/2/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0432\u0432\u043e\u0434\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python tcp_server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: bash python tcp_client.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import socket HOST = '127.0.0.1' PORT = 65432 a = input(\"Enter side a: \") b = input(\"Enter side b: \") with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((HOST, PORT)) s.sendall(f\"{a},{b}\".encode()) data = s.recv(1024) print(f\"The length of the hypotenuse is {data.decode()}\")","title":"Task 2"},{"location":"laboratory_work_1/2/#2-tcp-","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2: TCP \u041a\u043b\u0438\u0435\u043d\u0442-\u0421\u0435\u0440\u0432\u0435\u0440 \u0441 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0435\u0439"},{"location":"laboratory_work_1/2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u0435 \u0433\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u044b \u043f\u043e \u0442\u0435\u043e\u0440\u0435\u043c\u0435 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u0432\u0432\u043e\u0434\u044f \u0441\u0442\u043e\u0440\u043e\u043d\u044b \u0442\u0440\u0435\u0443\u0433\u043e\u043b\u044c\u043d\u0438\u043a\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0437\u0430\u043f\u0440\u043e\u0441 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"laboratory_work_1/2/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"laboratory_work_1/2/#_3","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python tcp_server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430: bash python tcp_client.py","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"laboratory_work_1/2/#_4","text":"import socket HOST = '127.0.0.1' PORT = 65432 a = input(\"Enter side a: \") b = input(\"Enter side b: \") with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((HOST, PORT)) s.sendall(f\"{a},{b}\".encode()) data = s.recv(1024) print(f\"The length of the hypotenuse is {data.decode()}\")","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"laboratory_work_1/3/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html . \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b index.html \u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python simple_http_server.py \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/ \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import socket import datetime HOST = '127.0.0.1' PORT = 8080 with open('index.html', 'r') as file: html_content = file.read() response = f\"\"\"HTTP/1.1 200 OK Content-Type: text/html Content-Length: {len(html_content)} {html_content}\"\"\" with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((HOST, PORT)) s.listen(1) print(f'Serving HTTP on port {PORT}') while True: conn, addr = s.accept() with conn: request = conn.recv(1024).decode() print(request) conn.sendall(response.replace('${current_time}', datetime.datetime.now().isoformat()).encode()) conn.close()","title":"Task 3"},{"location":"laboratory_work_1/3/#3-http-html","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3: HTTP \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u0432\u044b\u0434\u0430\u0447\u0438 HTML \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b"},{"location":"laboratory_work_1/3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u043e\u0442\u0432\u0435\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435\u043c, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0438\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html .","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"laboratory_work_1/3/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"laboratory_work_1/3/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0444\u0430\u0439\u043b index.html \u0441 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435\u043c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python simple_http_server.py \u041e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"laboratory_work_1/3/#_4","text":"import socket import datetime HOST = '127.0.0.1' PORT = 8080 with open('index.html', 'r') as file: html_content = file.read() response = f\"\"\"HTTP/1.1 200 OK Content-Type: text/html Content-Length: {len(html_content)} {html_content}\"\"\" with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((HOST, PORT)) s.listen(1) print(f'Serving HTTP on port {PORT}') while True: conn, addr = s.accept() with conn: request = conn.recv(1024).decode() print(request) conn.sendall(response.replace('${current_time}', datetime.datetime.now().isoformat()).encode()) conn.close()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"laboratory_work_1/4/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: socket, threading \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python chat_server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445: bash python chat_client.py \u041b\u0438\u0441\u0442\u0438\u043d\u0433 import socket import threading HOST = '127.0.0.1' PORT = 65432 def receive_messages(sock): while True: try: message = sock.recv(1024) if not message: break print(message.decode()) except: break with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((HOST, PORT)) threading.Thread(target=receive_messages, args=(s,)).start() while True: message = input() if message.lower() == 'exit': s.close() break s.send(message.encode())","title":"Task 4"},{"location":"laboratory_work_1/4/#4","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4: \u041c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442"},{"location":"laboratory_work_1/4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0442\u043e\u043a\u043e\u0432 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0439 \u043e\u0442 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"laboratory_work_1/4/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438: socket, threading \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: TCP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"laboratory_work_1/4/#_3","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python chat_server.py \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043a\u043b\u0438\u0435\u043d\u0442\u043e\u0432 \u0432 \u0440\u0430\u0437\u043d\u044b\u0445 \u0442\u0435\u0440\u043c\u0438\u043d\u0430\u043b\u0430\u0445: bash python chat_client.py","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"laboratory_work_1/4/#_4","text":"import socket import threading HOST = '127.0.0.1' PORT = 65432 def receive_messages(sock): while True: try: message = sock.recv(1024) if not message: break print(message.decode()) except: break with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.connect((HOST, PORT)) threading.Thread(target=receive_messages, args=(s,)).start() while True: message = input() if message.lower() == 'exit': s.close() break s.send(message.encode())","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"},{"location":"laboratory_work_1/5/","text":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b. \u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438 \u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP \u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python web_server.py \u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 curl \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442: bash curl -d \"discipline=Math&grade=A\" -X POST http://127.0.0.1:8080/ \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/ \u041b\u0438\u0441\u0442\u0438\u043d\u0433 def parse_post_data(data): params = {} pairs = data.split('&') for pair in pairs: key, value = pair.split('=') params[key] = value.replace('+', ' ') return params with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((HOST, PORT)) s.listen() print(\"Web server started on port\", PORT) while True: conn, addr = s.accept() thread = threading.Thread(target=handle_client, args=(conn, addr)) thread.start()","title":"Task 5"},{"location":"laboratory_work_1/5/#5-web-get-post","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5: Web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432"},{"location":"laboratory_work_1/5/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442 \u0438 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u0445 \u0438 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u0447\u0435\u0440\u0435\u0437 POST-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u0435\u0442 \u0438\u0445 \u0447\u0435\u0440\u0435\u0437 GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b.","title":"\u041a\u0440\u0430\u0442\u043a\u043e\u0435 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"laboratory_work_1/5/#_2","text":"\u042f\u0437\u044b\u043a: Python \u0411\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0430: socket \u041f\u0440\u043e\u0442\u043e\u043a\u043e\u043b: HTTP","title":"\u0421\u0442\u0435\u043a \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0438"},{"location":"laboratory_work_1/5/#_3","text":"\u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u0441\u0435\u0440\u0432\u0435\u0440: bash python web_server.py \u0414\u043b\u044f \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 curl \u0438\u043b\u0438 \u0434\u0440\u0443\u0433\u043e\u0439 HTTP-\u043a\u043b\u0438\u0435\u043d\u0442: bash curl -d \"discipline=Math&grade=A\" -X POST http://127.0.0.1:8080/ \u0414\u043b\u044f \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0430 \u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0442\u043a\u0440\u043e\u0439\u0442\u0435 \u0431\u0440\u0430\u0443\u0437\u0435\u0440 \u0438 \u043f\u0435\u0440\u0435\u0439\u0434\u0438\u0442\u0435 \u043f\u043e \u0430\u0434\u0440\u0435\u0441\u0443: bash http://127.0.0.1:8080/","title":"\u041a\u0430\u043a \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0442\u044c"},{"location":"laboratory_work_1/5/#_4","text":"def parse_post_data(data): params = {} pairs = data.split('&') for pair in pairs: key, value = pair.split('=') params[key] = value.replace('+', ' ') return params with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s: s.bind((HOST, PORT)) s.listen() print(\"Web server started on port\", PORT) while True: conn, addr = s.accept() thread = threading.Thread(target=handle_client, args=(conn, addr)) thread.start()","title":"\u041b\u0438\u0441\u0442\u0438\u043d\u0433"}]}